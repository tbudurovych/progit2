[[_rebasing]]
=== Перебазовування

(((rebasing)))
Git має два основні способи інтегрувати зміни з гілки в гілку: `merge` (зливання) та `rebase`(перебазовування).
В цьому розділі вивчатимете що таке перебазовування, як його виконувати, чому воно вважається таким чудовим інструментом та випадки, коли його не варто застосовувати.

==== Просте Перебазовування

Поверніться до попереднього прикладу з <<_basic_merging>>, де видно, що ваша робота розгалужилася в комітах по двох різних гілках.

.Просте розгалуження історії
image::images/basic-rebase-1.png[Просте розгалуження історії.]

Найпростіше інтегрувати гілки, як ми вже розглянули, за допомогою команди `merge`.
Вона виконає трьох-точкове зливання між двома останніми знімками гілок (`C3` і `C4`) та їх найближчим спільним предком (`C2`), створивши новий знімок (і коміт).

.Інтеграція розгалуженої історії за допомогою зливання
image::images/basic-rebase-2.png[Інтеграція розгалуженої історії за допомогою зливання.]

Проте, існує інший спосіб: можете взяти латку (patch) змін з `C4` і накласти її поверху `C3`.
В Git це називають _перебазовуванням_ (rebasing).
За допомогою `rebase` ви можете брати всі зміни, що були в комітах одної гілки та відтворити їх на іншій гілці.(((git commands, rebase)))

Ось приклад як це могло б виглядати:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Працює це так: шукається спільний предок двох гілок (поточної та тої, на котру перебазовуєтесь); отримуються відмінності (diff), спричинені кожним комітом поточної гілки; відмінності зберігаються в тимчасові файли; поточна гілка встановлюється (reset) на коміт гілки, на яку перебазовуємось; та накінець, застосовуємо кожну зміну.

.Перебазовування зміни з `C4` на `C3`
image::images/basic-rebase-3.png[Перебазовування зміни з `C4` на `C3`.]

Тепер ви можете повернутися на `master` та зробити fast-forward злиття.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Перемотування (fast-forwarding) гілки master
image::images/basic-rebase-4.png[Перемотування (fast-forwarding) гілки master.]

Тепер знімок, що вказує на `C4'` є точнісінько таким, на який вказував `C5` із нашого прикладу зі зливанням.
Кінцевий результат інтеграції змін нічим не відрізняється, проте, у випадку перебазовування отримуємо чистішу історію.
Якщо подивитеся на журнал перебазованої гілки, то він буде лінійним: виходить, що вся робота є послідовною, незважаючи на те, що насправді вона виконувалася паралельно.

Ви часто робитимете таке для того, щоб ваші коміти накладалися на віддалені гілки чисто – наприклад, якщо хочете зробити внесок до проекту, яким самі не керуєте.
В цьому випадку, ви працюватимете в гілці й потім перебазуєтеся на `origin/master`, коли будете готові надіслати свої латки до основного проекту.
В свою чергу керуючий проектом не змушений робити ніякої додаткової інтеграційної роботи – просто перемотати гілку чи чисто накласти зміни.

Зауважте, що відбиток, на який вказує фінальний коміт, чи він є останнім з перебазовуваних комітів у випадку перебазовування, чи це фінальний коміт зливання, є одинаковим – тільки історія відрізняється.
Операція перебазовування відтворює зміни з однієї лінії роботи на іншій лінії в тому ж порядку, в якому ці зміни зустрічалися, в той час як зливання бере кінцеві точки та зливає їх докупи.

==== Цікавіше Перебазовування

Під час перебазовування ви можете програвати зміни не лише на цільовій гілці.
Для прикладу візьміть історію <<rbdiag_e>>.
Ви створили тематичну гілку (`server`) для того, щоб додати певну серверну функціональність до свого проекту та додали туди коміт.
Потім створили гілку для для змін на клієнтській стороні (`client`), де встигли зробити кілька комітів.
Накінець, повернулися до гілки з серверними змінами та додали кілька комітів там.

[[rbdiag_e]]
.A history with a topic branch off another topic branch
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch.]

Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it's tested further.
You can take the changes on client that aren't on server (`C8` and `C9`) and replay them on your master branch by using the `--onto` option of `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

This basically says, ``Check out the client branch, figure out the patches from the common ancestor of the `client` and `server` branches, and then replay them onto `master`.''
It's a bit complex, but the result is pretty cool.

.Rebasing a topic branch off another topic branch
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch.]

Now you can fast-forward your master branch (see <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Fast-forwarding your master branch to include the client branch changes
image::images/interesting-rebase-3.png[Fast-forwarding your master branch to include the client branch changes.]

Let's say you decide to pull in your server branch as well.
You can rebase the server branch onto the master branch without having to check it out first by running `git rebase [basebranch] [topicbranch]` – which checks out the topic branch (in this case, `server`) for you and replays it onto the base branch (`master`):

[source,console]
----
$ git rebase master server
----

This replays your `server` work on top of your `master` work, as shown in <<rbdiag_h>>.

[[rbdiag_h]]
.Rebasing your server branch on top of your master branch
image::images/interesting-rebase-4.png[Rebasing your server branch on top of your master branch.]

Then, you can fast-forward the base branch (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

You can remove the `client` and `server` branches because all the work is integrated and you don't need them anymore, leaving your history for this entire process looking like <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Final commit history
image::images/interesting-rebase-5.png[Final commit history.]

[[_rebase_peril]]
==== The Perils of Rebasing

(((rebasing, perils of)))
Ahh, but the bliss of rebasing isn't without its drawbacks, which can be summed up in a single line:

**Do not rebase commits that exist outside your repository.**

If you follow that guideline, you'll be fine.
If you don't, people will hate you, and you'll be scorned by friends and family.

When you rebase stuff, you're abandoning existing commits and creating new ones that are similar but different.
If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.

Let's look at an example of how rebasing work that you've made public can cause problems.
Suppose you clone from a central server and then do some work off that.
Your commit history looks like this:

.Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it."]

Now, someone else does more work that includes a merge, and pushes that work to the central server.
You fetch them and merge the new remote branch into your work, making your history look something like this:

.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work."]

Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.
You then fetch from that server, bringing down the new commits.

[[_pre_merge_rebase_work]]
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png["Someone pushes rebased commits, abandoning commits you've based your work on."]

Now you're both in a pickle.
If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:

[[_merge_rebase_work]]
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]

If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.
Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.
It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why she rebased in the first place.

[[_rebase_rebase]]
==== Rebase When You Rebase

If you *do* find yourself in a situation like this, Git has some further magic that might help you out. If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.

It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit. This is called a ``patch-id''.

If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:

* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]

This only works if C4 and C4' that your partner made are almost exactly the same patch. Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).

You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`. Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.

If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.

If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.

If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.

One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.

The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.

Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.

In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
