[[_rebasing]]
=== Перебазовування

(((rebasing)))
Git має два основні способи інтегрувати зміни з гілки в гілку: `merge` (зливання) та `rebase`(перебазовування).
В цьому розділі вивчатимете що таке перебазовування, як його виконувати, чому воно вважається таким чудовим інструментом та випадки, коли його не варто застосовувати.

==== Просте Перебазовування

Поверніться до попереднього прикладу з <<_basic_merging>>, де видно, що ваша робота розгалужилася в комітах по двох різних гілках.

.Просте розгалуження історії
image::images/basic-rebase-1.png[Просте розгалуження історії.]

Найпростіше інтегрувати гілки, як ми вже розглянули, за допомогою команди `merge`.
Вона виконає трьох-точкове зливання між двома останніми знімками гілок (`C3` і `C4`) та їх найближчим спільним предком (`C2`), створивши новий знімок (і коміт).

.Інтеграція розгалуженої історії за допомогою зливання
image::images/basic-rebase-2.png[Інтеграція розгалуженої історії за допомогою зливання.]

Проте, існує інший спосіб: можете взяти латку (patch) змін з `C4` і накласти її поверху `C3`.
В Git це називають _перебазовуванням_ (rebasing).
За допомогою `rebase` ви можете брати всі зміни, що були в комітах одної гілки та відтворити їх на іншій гілці.(((git commands, rebase)))

Ось приклад як це могло б виглядати:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Працює це так: шукається спільний предок двох гілок (поточної та тої, на котру перебазовуєтесь); отримуються відмінності (diff), спричинені кожним комітом поточної гілки; відмінності зберігаються в тимчасові файли; поточна гілка встановлюється (reset) на коміт гілки, на яку перебазовуємось; та накінець, застосовуємо кожну зміну.

.Перебазовування зміни з `C4` на `C3`
image::images/basic-rebase-3.png[Перебазовування зміни з `C4` на `C3`.]

Тепер ви можете повернутися на `master` та зробити fast-forward злиття.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Перемотування (fast-forwarding) гілки master
image::images/basic-rebase-4.png[Перемотування (fast-forwarding) гілки master.]

Тепер знімок, що вказує на `C4'` є точнісінько таким, на який вказував `C5` із нашого прикладу зі зливанням.
Кінцевий результат інтеграції змін нічим не відрізняється, проте, у випадку перебазовування отримуємо чистішу історію.
Якщо подивитеся на журнал перебазованої гілки, то він буде лінійним: виходить, що вся робота є послідовною, незважаючи на те, що насправді вона виконувалася паралельно.

Ви часто робитимете таке для того, щоб ваші коміти накладалися на віддалені гілки чисто – наприклад, якщо хочете зробити внесок до проекту, яким самі не керуєте.
В цьому випадку, ви працюватимете в гілці й потім перебазуєтеся на `origin/master`, коли будете готові надіслати свої латки до основного проекту.
В свою чергу керуючий проектом не змушений робити ніякої додаткової інтеграційної роботи – просто перемотати гілку чи чисто накласти зміни.

Зауважте, що відбиток, на який вказує фінальний коміт, чи він є останнім з перебазовуваних комітів у випадку перебазовування, чи це фінальний коміт зливання, є одинаковим – тільки історія відрізняється.
Операція перебазовування відтворює зміни з однієї лінії роботи на іншій лінії в тому ж порядку, в якому ці зміни зустрічалися, в той час як зливання бере кінцеві точки та зливає їх докупи.

==== Цікавіше Перебазовування

Під час перебазовування ви можете програвати зміни не лише на цільовій гілці.
Для прикладу візьміть історію <<rbdiag_e>>.
Ви створили тематичну гілку (`server`) для того, щоб додати певну серверну функціональність до свого проекту та додали туди коміт.
Потім створили гілку для змін на клієнтській стороні (`client`), де встигли зробити кілька комітів.
Накінець, повернулися до гілки з серверними змінами та додали кілька комітів там.

[[rbdiag_e]]
.Історія з тематичною гілкою, відгалуженою від іншої тематичної гілки
image::images/interesting-rebase-1.png[Історія з тематичною гілкою, відгалуженою від іншої тематичної гілки.]

Допустимо, ви вирішили злити зміни клієнтської сторони до головної лінії коду для релізу, але хочете зачекати з серверними, доки вони будуть більше відтестовані.
Для цього можете взяти клієнтські зміни, які ще не є на сервері (`C8` і `C9`) та відтворити їх на `master`, користуючись опцією `--onto` команди `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

Що означає ``Перейди на клієнтську гілку, знайди латки, починаючи із спільного предка гілок `client` та `server`, та відтвори їх на `master`.''
Це трохи складно, але результат досить класний.

.Перебазовування тематичної гілки, що відгалужена від іншої гілки
image::images/interesting-rebase-2.png[Перебазовування тематичної гілки, що відгалужена від іншої гілки.]

Тепер можете перемотати свою остовну гілку `master (дивіться <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Перемотування гілки master, для залучення в неї змін з клієнтської гілки
image::images/interesting-rebase-3.png[Перемотування гілки master, для залучення в неї змін з клієнтської гілки.]

Скажімо тепер ви також вирішили прийняти зміни з серверної гілки.
Ви можете перебазувати серверну гілку на `master` без переходу на неї, користуючись командою `git rebase [basebranch] [topicbranch]`, що перейде на тематичну гілку (в нашому випадку `server`) та застосує її зміни на базовій гілці (`master`):

[source,console]
----
$ git rebase master server
----

Це відтворить вашу зроблену роботу з `server` поверху `master`, як відображено в <<rbdiag_h>>.

[[rbdiag_h]]
.Перебазовування серверної гілки поверху `master`
image::images/interesting-rebase-4.png[Перебазовування серверної гілки поверху `master`.]

Тоді, можете перемотати базову гілку (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Гілки `client` та `server` можна вилучати, оскільки вся робота з них вже інтегрована і вам їх більше не знадобиться, що зробить вашу історію такою як <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Остаточна історія комітів
image::images/interesting-rebase-5.png[Остаточна історія комітів.]

[[_rebase_peril]]
==== Небезпеки Перебазовування

(((rebasing, perils of)))
Ох, але вся ефектність ??? перебазовування не позбавлена своїх недоліків, які можна підсумувати одим рядком:

**Не перебазовуйте коміти, що існують в інших репозиторіях.**

Якщо будете слідувати цьому правилу, то все буде гаразд.
Якщо ні, то люди ненавидітимуть вас, а сім'я та друзі зневажатимуть.

Коли ви перебазовуєте, то втрачаєте існуючі коміти, а натомість створюєте нові, які є схожі, проте різні. 
Якщо ви виклали (push) коміти та інші забрали (pull), базуючи на них свою роботу, а потім ви перезаписали ці коміти з допомогою `git rebase` та ти виклали (push) їх знову, учасники прокету будуть змушені пере-злити свою роботу, а потім у вас буде плутанина, коли ви будете тягнути (pull) їхню роботу назад у свій репозиторій.

Давайте поглянемо на приклад того, як перебазовування змін, які вже зробили публічними, може створювати проблеми.
Нехай ви склонували репозиторій з центрального сервера і трохи в ньому попрацювали.
Історія комітів виглядає десь так:

.Склонували репозиторій та трохи в ньому попрацювали
image::images/perils-of-rebasing-1.png["Склонували репозиторій та трохи в ньому попрацювали."]

Тепер ще хтось додав змін, включно із зливанням, та відправив ці зміни на центральний сервер.

Ви отримали ці зміни та злили нову віддалену гілку зі своєю роботою, отже ваша історія виглядає десь так:

.Отримали ще коміти та злили їх із своєю роботою
image::images/perils-of-rebasing-2.png["Отримали ще коміти та злили їх із своєю роботою."]

Далі, ті, хто викладали та зливали зміни, вирішили поверенутися та перебазувати зроблену роботу, виконавши `git push --force` для того, щоб переписати історію на сервері.
Коли ви оновитеся (`fetch`), то отримаєте з сервера нові коміти.

[[_pre_merge_rebase_work]]
.Хтось виклав перебазовані коміти, зневажаючи коміти, на яких ви базували свою роботу
image::images/perils-of-rebasing-3.png["Хтось виклав перебазовані коміти, зневажаючи коміти, на яких ви базували свою роботу."]

Тепер ви обидвоє в неприємній ситуації.
Якщо виконаєте `git pull` то створите новий коміт злиття, який включатиме обидва рядки з історії, а ваш репозиторій виглядатиме так:

[[_merge_rebase_work]]
.Ви знову виконали зливання тої самої роботи в новий коміт зливання
image::images/perils-of-rebasing-4.png[Ви знову виконали зливання тої самої роботи в новий коміт зливання.]

Коли ви виконаєте `git log` для такої історії, то побачите два коміти, що мають того ж автора, дату та повідомлення, шо є досить заплутаним.
Більше того, коли ви відправите (push) таку історію на сервер, ви відновите ті всі перебазовані коміти на центральному сервері, що надалі заплутуватиме інших.
Мабуть інші розробники не хочуть мати `C4` та `C6` в ісорії, власне чому вони й ініціювали перебазовування.

[[_rebase_rebase]]
==== Rebase When You Rebase

If you *do* find yourself in a situation like this, Git has some further magic that might help you out. If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.

It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit. This is called a ``patch-id''.

If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:

* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]

This only works if C4 and C4' that your partner made are almost exactly the same patch. Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).

You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`. Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.

If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.

If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.

If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.

One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.

The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.

Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.

In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
